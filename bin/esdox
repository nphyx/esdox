#!/usr/bin/env node
const esdox = require("../esdox").esdox;
const yargs = require("yargs")
  .usage("Usage:\tesdox [options] [-o output_dir] [-t template_dir] <file | directory>")
  .options("output", {
    alias: "o",
    default: "output",
    describe: "Output directory for generated docs"
  })
  .options("include-private", {
    alias: "p",
    boolean: true,
    describe: "Include internal/private methods"
  })
  .options("debug", {
    alias: "d",
    boolean: true,
    describe: "Print extended debugging information"
  })
  .options("templates", {
    alias: "t",
    describe: "Template override directory"
  })
  .options("index", {
    alias: "i",
    describe: "Create an index.md file",
    boolean: true
  })
  .options("index-sort", {
    alias: "is",
    default: "standard",
    describe: "Sort order for index",
    choices: ["standard","namespace","none"]
  })
  .options("recursive", {
    alias: "r",
    describe: "recurse subdirectories, flattened output",
    boolean: true
  })
  .options("keep-fs", {
    alias: "kfs",
    describe: "recurse subdirectories, keeping file structure",
    boolean: true
  })
  .options("index-name", {
    alias: "in",
    describe: "custom filename for the generated index",
    default: "index.md"
  })
  .alias("c", "config")
  .config("config", "Configuration JSON file")
  .alias("H", "help")
  .help("help")
  .alias("v", "version")
  .version()
  .epilogue("See README.md for more information.");

yargs.wrap(Math.min(100, yargs.terminalWidth()));
const {argv} = yargs;

if (!argv._.length && !argv.input) {
  yargs.showHelp();
} else {
  const opts = {
    debug: argv.d,
    index: argv.i,
    indexName: argv.in,
    indexSort: argv.is,
    input: argv.input ? argv.input : argv._,
    keepFs: argv.kfs,
    output: argv.o,
    private: argv.p,
    recursive: argv.r,
    templates: argv.templates
  }
  esdox(opts)
    .then(() => process.exit())
    .catch(err => console.error("Error: " + err.message))
}
