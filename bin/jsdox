#!/usr/bin/env node
const jsdox = require("../jsdox").jsdox;
const yargs = require("yargs")
  .usage("Usage:\tjsdox [options] [-o output_dir] [-t template_dir] <file | directory>")
  .options("output", {
    alias: "o",
    default: "output",
    describe: "Output directory for generated docs"
  })
  .options("A", {
    alias: "All",
    boolean: true,
    describe: "Include internal/private methods"
  })
  .options("d", {
    alias: "debug",
    boolean: true,
    describe: "Print extended debugging information"
  })
  .options("templateDir", {
    alias: "t",
    describe: "Template override directory"
  })
  .options("index", {
    alias: "i",
    describe: "Create an index.md file",
    boolean: true
  })
  .options("index-sort", {
    default: "standard",
    describe: "Sort order for index",
    choices: ["standard","namespace","none"]
  })
  .options("recursive", {
    alias: "r",
    describe: "recurse subdirectories, flattened output",
    boolean: true
  })
  .options("respect-recursive", {
    alias: "rr",
    describe: "recurse subdirectories, preserved output",
    boolean: true
  })
  .alias("c", "config")
  .config("config", "Configuration JSON file")
  .alias("H", "help")
  .help("help")
  .alias("v", "version")
  .version()
  .epilogue("See README.md for more information.");

yargs.wrap(Math.min(100, yargs.terminalWidth()));
const {argv} = yargs;

if (!argv._.length && !argv.input) {
  yargs.showHelp();
} else {
  const opts = {
    r: argv.r,
    rr: argv.rr,
    output: argv.output,
    debug: argv.debug,
    A: argv.A,
    index: argv.index,
    "index-sort": argv["index-sort"],
    input: argv.input ? argv.input : argv._
  }
  jsdox(opts);
}

